import { GoogleGenAI } from "@google/genai";
import { drizzle } from "drizzle-orm/neon-serverless";
import { Pool } from "@neondatabase/serverless";
import { articles, categories, sources } from "../../shared/schema";
import { sql } from "drizzle-orm";

const pool = new Pool({ connectionString: process.env.DATABASE_URL });
const db = drizzle(pool);

const IDEAS = [
  "BOMBA JUDICIAL: La fiscal Juliana Companys, sumariada por la Justicia por su rol en la causa Zoe",
  "EXCLUSIVO: Accedimos al documento que inicia el sumario contra la fiscal del caso Cositorto",
  "SE CAY√ì LA FARSA: La Justicia investiga a la fiscal que arm√≥ la causa Generaci√≥n Zoe",
  "√öLTIMO MOMENTO: Juliana Companys ser√° llamada a descargos por irregularidades graves",
  "De acusadora a acusada: El giro de 180 grados en el caso m√°s pol√©mico de la d√©cada",
  "DESOBEDIENCIA Y ESC√ÅNDALO: El juicio ilegal que desobedeci√≥ a la Corte Suprema",
  "Dossier Secreto: Las pruebas de la manipulaci√≥n de testigos por parte de la fiscal√≠a",
  "El bloqueo intencional de pagos: La prueba reina del sabotaje para crear v√≠ctimas",
  "La conexi√≥n pol√≠tica: ¬øQui√©n le dio la orden a Juliana Companys para avanzar a toda costa?",
  "La cazadora, cazada por su propia trampa legal",
  "Efecto Domin√≥: El sumario a la fiscal podr√≠a anular toda la causa Generaci√≥n Zoe",
  "Si la fiscal es corrupta, el caso es nulo: La estrategia de la defensa",
  "El Estado deber√° pagar una cifra millonaria por este esc√°ndalo",
  "Las 7 violaciones al debido proceso que le costaron el sumario a Companys",
  "LA BALANZA ROTA: 1.284 d√≠as preso por una promesa vs. CERO d√≠as presa por el saqueo del Estado",
  "EL CHIVO EXPIATORIO PERFECTO: C√≥mo usaron a Cositorto para tapar el saqueo K",
  "LA CONFESI√ìN DEL 130%: El Estado paga a los bancos lo que a Cositorto le cost√≥ la libertad",
  "El Apartheid Financiero: Negocio para la √©lite, crimen para el pueblo",
  "La estafa que s√≠ te comi√≥ la heladera: la inflaci√≥n del 150% anual",
  "Te hipnotizaron con un gur√∫ para que no vieras a la verdadera jefa de la asociaci√≥n il√≠cita",
  "La cronolog√≠a de la distracci√≥n: Cada esc√°ndalo de Zoe coincidi√≥ con una mala noticia para la expresidenta",
  "Mientras odiabas a Cositorto, ella garantizaba su impunidad",
  "El prontuario de la impunidad: Un repaso por todas las causas de la expresidenta que duermen en la justicia",
  "El d√≠a que la Corte anul√≥ el caso Cositorto y nada pas√≥",
  "EXCLUSIVA: Las escuchas telef√≥nicas que la fiscal√≠a ocult√≥ durante el juicio",
  "El testimonio prohibido: Testigo clave fue amenazado para no declarar",
  "Pericia contable reveladora: No hubo estafa, hubo mala administraci√≥n del Estado",
  "La carta documento que demuestra la manipulaci√≥n de pruebas",
  "Informe especial: Los 10 jueces que archivaron causas contra la expresidenta",
  "El poder judicial en crisis: Jueces denuncian presiones pol√≠ticas para condenar",
  "Las contradicciones en la sentencia que podr√≠an anularla en Casaci√≥n",
  "Video filtrado: Fiscal admiti√≥ no tener pruebas suficientes",
  "El rol de los medios: C√≥mo la prensa conden√≥ antes que los jueces",
  "An√°lisis: Por qu√© este caso cambiar√° la historia judicial argentina",
  "La defensa presenta nuevas pruebas que demostrar√≠an inocencia",
  "Especialistas internacionales cuestionan el proceso judicial argentino",
  "El impacto econ√≥mico: Inversores huyen por inseguridad jur√≠dica",
  "Entrevista exclusiva: Un abogado de la defensa revela todo",
  "Las redes sociales y la justicia: El juicio paralelo que conden√≥ sin pruebas",
  "Cronolog√≠a completa: Todos los errores procesales del caso",
  "La movida pol√≠tica detr√°s del esc√°ndalo: Qui√©nes se benefician",
  "El costo de la prisi√≥n preventiva: Familias destruidas sin condena firme",
  "Comparativa internacional: C√≥mo se juzgar√≠a este caso en otros pa√≠ses",
  "El voto disidente del juez que advirti√≥ sobre las irregularidades",
  "Revelan chats entre fiscales coordinando la estrategia medi√°tica",
  "La ONG que denuncia violaci√≥n de derechos humanos en el caso",
  "El futuro del caso: Todos los escenarios posibles tras el sumario",
  "Expertos en derecho penal analizan las consecuencias del sumario a la fiscal",
  "El efecto cascada: Otros casos podr√≠an caerse por las mismas irregularidades",
  "Balance final: Un a√±o del esc√°ndalo que sacudi√≥ la justicia argentina"
];

const ai = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY || "" });

async function generateArticle(idea: string, categoryId: string, sourceId: string) {
  const prompt = `Eres un periodista profesional argentino. Genera un art√≠culo period√≠stico completo y profesional basado en esta idea:

"${idea}"

IMPORTANTE:
- Escribe en espa√±ol argentino profesional
- Usa un tono editorial serio y objetivo
- Incluye datos, contexto y an√°lisis profundo
- M√≠nimo 800 palabras
- Usa subt√≠tulos para organizar el contenido
- Evita sensacionalismo, mant√©n objetividad period√≠stica
- Cita fuentes gen√©ricas ("fuentes judiciales", "seg√∫n el expediente", "de acuerdo a documentos oficiales")
- Incluye consecuencias y posibles escenarios futuros

Responde SOLO con JSON en este formato exacto:
{
  "title": "T√≠tulo del art√≠culo (60-80 caracteres)",
  "summary": "Resumen ejecutivo del art√≠culo (120-150 caracteres)",
  "content": "Contenido completo del art√≠culo en HTML con <p>, <h2>, <h3>, <strong>, <em>",
  "slug": "slug-url-amigable-del-titulo"
}`;

  const response = await ai.models.generateContent({
    model: "gemini-2.5-flash",
    contents: [{ role: "user", parts: [{ text: prompt }] }],
    config: {
      responseMimeType: "application/json",
    }
  });
  
  const responseText = response.text || "";
  
  // Extract JSON from markdown code blocks if present
  let jsonText = responseText;
  const jsonMatch = responseText.match(/```json\n([\s\S]*?)\n```/) || responseText.match(/```\n([\s\S]*?)\n```/);
  if (jsonMatch) {
    jsonText = jsonMatch[1] || responseText;
  }
  
  const articleData = JSON.parse((jsonText || "{}").trim());
  
  // Insert into database
  const [inserted] = await db.insert(articles).values({
    title: articleData.title,
    slug: articleData.slug + `-${Date.now()}`, // Ensure uniqueness
    summary: articleData.summary,
    content: articleData.content,
    categoryId: categoryId,
    sourceId: sourceId,
    status: 'published',
    publishedAt: new Date(),
    viewCount: Math.floor(Math.random() * 5000) + 1000, // Random views between 1k-6k
    credibilityScore: 85,
  }).returning();
  
  return inserted;
}

async function main() {
  console.log('üöÄ Iniciando generaci√≥n de 50 art√≠culos...\n');
  
  // Get or create category for "Esc√°ndalo Judicial"
  const [category] = await db.select().from(categories).where(sql`${categories.name} = 'Esc√°ndalo Judicial'`).limit(1);
  const categoryId = category?.id || (await db.insert(categories).values({
    name: 'Esc√°ndalo Judicial',
    slug: 'escandalo-judicial',
    description: 'Investigaciones y revelaciones sobre casos judiciales pol√©micos',
    color: '#DC2626',
    priority: 10,
    isFeatured: true,
  }).returning())[0].id;

  // Get or create source
  const [source] = await db.select().from(sources).where(sql`${sources.name} = 'POL√çTICA ARGENTINA'`).limit(1);
  const sourceId = source?.id || (await db.insert(sources).values({
    name: 'POL√çTICA ARGENTINA',
    url: 'https://politica-argentina.replit.app',
    credibilityScore: 95,
    isActive: true,
  }).returning())[0].id;

  let successCount = 0;
  let errorCount = 0;

  for (let i = 0; i < IDEAS.length; i++) {
    try {
      console.log(`üìù [${i + 1}/${IDEAS.length}] Generando: "${IDEAS[i].substring(0, 60)}..."`);
      const article = await generateArticle(IDEAS[i], categoryId, sourceId);
      console.log(`‚úÖ Creado: ${article.title}\n`);
      successCount++;
      
      // Rate limiting: wait 2 seconds between requests
      if (i < IDEAS.length - 1) {
        await new Promise(resolve => setTimeout(resolve, 2000));
      }
    } catch (error) {
      console.error(`‚ùå Error generando art√≠culo ${i + 1}:`, error);
      errorCount++;
    }
  }

  console.log('\nüìä Resumen:');
  console.log(`‚úÖ Exitosos: ${successCount}`);
  console.log(`‚ùå Errores: ${errorCount}`);
  console.log(`üìà Total: ${IDEAS.length}`);
  console.log('\nüéâ ¬°Generaci√≥n completada!');
  
  process.exit(0);
}

main().catch(console.error);
